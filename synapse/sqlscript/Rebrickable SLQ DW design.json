{
	"name": "Rebrickable SLQ DW design",
	"properties": {
		"content": {
			"query": "--Creating the user for Service principal used for connecting to Azure Data Lake Storage and Azure Synapse Analytics\nCREATE USER [Rebrickable-Dev-Databricks] FROM EXTERNAL PROVIDER;\nGO\n--Granting the db owner role to SP user and additional privileges to be able to create and load the tables with data\nEXEC sp_addrolemember db_owner, [Rebrickable-Dev-Databricks];\nGRANT ADMINISTER DATABASE BULK OPERATIONS TO [Rebrickable-Dev-Databricks]\n\nGRANT CREATE TABLE TO [Rebrickable-Dev-Databricks]\nGRANT ALTER ON SCHEMA ::dbo TO [Rebrickable-Dev-Databricks]\n\n--CREATE MASTER KEY ENCRYPTION BY PASSWORD = 'Rebrickable1234'\n--Checking if the data was loaded to the tables\nselect * from dbo.OwnedSets\nselect * from dbo.Date\nselect * from dbo.Sets\nselect * from dbo.Profile\n\n--Recreating the tables using CTAS to add the proper distribution and index\n\n--OwnedSets - used the Hash Distribution since the Table is a Fact table in our DW. We assume that we are going to load here also the data for other users so the best column for distribution is Profile_ID.\n\nCREATE SCHEMA Rebrickable\nGO\nCREATE TABLE Rebrickable.OwnedSets\nWITH (\n    CLUSTERED COLUMNSTORE INDEX,\n    DISTRIBUTION = HASH (Profile_ID)\n    )\nAS\nSELECT *\nFROM dbo.OwnedSets\nGO\n\nDROP TABLE dbo.OwnedSets\nGO\n\n--Sets, Date, Profile - used the Replicate distribution since those tables are dimension tables in our DW.\n\nCREATE TABLE Rebrickable.Sets\nWITH (\n    HEAP,\n    DISTRIBUTION = REPLICATE\n    )\nAS\nSELECT *\nFROM dbo.Sets\nGO\n\nDROP TABLE dbo.Sets\nGO\n\nCREATE TABLE Rebrickable.Profile\nWITH (\n    HEAP,\n    DISTRIBUTION = REPLICATE\n    )\nAS\nSELECT *\nFROM dbo.Profile\nGO\n\nDROP TABLE dbo.Profile\nGO\n\nCREATE TABLE Rebrickable.Date\nWITH (\n    HEAP,\n    DISTRIBUTION = REPLICATE\n    )\nAS\nSELECT *\nFROM dbo.Date\nGO\n\nDROP TABLE dbo.Date\nGO\n\n--Creating two workload management groups for Loading purposes for Databricks Service Principal and Query purposes for myself\n\nselect * from sys.workload_management_workload_groups\n\nDROP WORKLOAD CLASSIFIER [wgcDatabricksPrincipal];\nCREATE WORKLOAD CLASSIFIER [wgcDatabricksPrincipal]\nWITH (WORKLOAD_GROUP = 'xlargerc'\n      ,MEMBERNAME = 'Rebrickable-Dev-Databricks'\n      ,IMPORTANCE = HIGH,\n       START_TIME = '00:00',\n        END_TIME = '02:00');\n\nDROP WORKLOAD CLASSIFIER [wgcABartKow];\nCREATE WORKLOAD CLASSIFIER [wgcABartKow]\nWITH (WORKLOAD_GROUP = 'xlargerc'\n      ,MEMBERNAME = 'agnieszka.kowalczyk93trn@gmail.com'\n      ,IMPORTANCE = HIGH);\n\n--Adding dynamic data masking for set_num to mask 3th,4th and 5th character in the string\n\nALTER TABLE Rebrickable.OwnedSets\nALTER COLUMN set_num ADD MASKED with (FUNCTION = 'partial(2,\"xxx\",2)')\n\n--Create user for testing dynamic data masking\n\nDROP USER MaskingTestUser\nCREATE USER MaskingTestUser WITHOUT LOGIN;\nGRANT SELECT ON SCHEMA::Rebrickable TO MaskingTestUser;\nEXECUTE AS USER = 'MaskingTestUser';\n\nselect * from Rebrickable.OwnedSets\n\n--Designing column-level security to hide the price of lego sets in OwnedSets fact table\n\n--Creating the testing users\nDROP USER ANALYST\nCREATE USER ANALYST WITHOUT LOGIN;\n\n--Setting up column permissions\nGRANT SELECT ON Rebrickable.OwnedSets(set_num, Profile_ID, Date) TO ANALYST\n\n--Testing using ANALYST user\nEXECUTE AS USER = 'ANALYST';\n\nselect * from Rebrickable.OwnedSets\n\n--Designing row-level security to narrow selecting the Lego Sets only to two Themes - Harry Potter and Fortnite\n\n--Create separate schema\nCREATE SCHEMA SECURITY\n\n--Create predicate\nCREATE FUNCTION Security.securityPredicate(@Theme as VARCHAR(255))\n    RETURNS TABLE\nWITH SCHEMABINDING\nAS\n    RETURN SELECT 1 AS securityPredicateResult\n    WHERE\n        @Theme IN ('Harry Potter','Fortnite') and USER_NAME() = 'Analyst'\n        OR USER_NAME() = 'DBO'\n\n--Create policy\nCREATE SECURITY POLICY ThemesFilter\nADD FILTER PREDICATE SECURITY.securityPredicate(Theme)\non Rebrickable.Sets\nWITH (STATE=ON)\n\n--Testing the row-level security set-up as Analyst user\nGRANT SELECT ON Rebrickable.sets to ANALYST\nEXECUTE AS USER = 'ANALYST'\nSelect count(*), Theme from Rebrickable.Sets\ngroup by Theme",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "Rebrickabledevsqldw",
				"poolName": "Rebrickabledevsqldw"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}